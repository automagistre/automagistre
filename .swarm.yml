version: '3.7'

services:
    nginx:
        image: ${IMAGE}
        networks:
            - traefik
        deploy:
            update_config:
                order: start-first
                failure_action: rollback
                parallelism: 1
                delay: 5s
            labels:
                - "traefik.enable=true"
                - "traefik.http.routers.automagistre-crm-next.rule=Host(`crm-next.automagistre.ru`)"
                - "traefik.http.routers.automagistre-crm-next.entrypoints=websecure"
                - "traefik.http.routers.automagistre-crm-next.tls=true"
                - "traefik.http.routers.automagistre-crm-next.tls.certresolver=leresolver"
                - "traefik.http.services.automagistre-crm-next-service.loadbalancer.server.port=80"

    redis:
        image: redis:6.2.6-alpine
        volumes:
            -   type: bind
                source: /opt/am/redis/data
                target: /data
        deploy:
            mode: replicated
            replicas: 1
            endpoint_mode: dnsrr
            update_config:
                order: stop-first

    hasura:
        image: hasura/graphql-engine:v2.0.9
        command:
            - graphql-engine
            - serve
            - --server-port=80
            - --unauthorized-role=anonymous
            - --cors-domain=*
            - --admin-secret=${HASURA_ADMIN_SECRET}
        environment:
            HASURA_GRAPHQL_DATABASE_URL: postgres://automagistre:automagistre@postgres:5432/automagistre
            HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://hasura:hasura@postgres:5432/automagistre
            HASURA_GRAPHQL_JWT_SECRET: '{"jwk_url": "https://auth.automagistre.ru/auth/realms/automagistre/protocol/openid-connect/certs"}'
            HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: 'false'
        networks:
            - default
            - traefik
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 10s
                order: start-first
            labels:
                - "traefik.enable=true"
                - "traefik.http.routers.automagistre-hasura-next.rule=Host(`api-next.automagistre.ru`)"
                - "traefik.http.routers.automagistre-hasura-next.entrypoints=websecure"
                - "traefik.http.routers.automagistre-hasura-next.tls=true"
                - "traefik.http.routers.automagistre-hasura-next.tls.certresolver=leresolver"
                - "traefik.http.services.automagistre-hasura-next-service.loadbalancer.server.port=80"

    postgres:
        image: postgres:14.1-alpine
        shm_size: 1gb
        entrypoint: bash
        command:
            - -c
            - |
                echo $$'
                    CREATE DATABASE automagistre;
                    CREATE USER automagistre WITH PASSWORD \'automagistre\';
                    CREATE USER hasura WITH PASSWORD \'hasura\';
                    GRANT ALL PRIVILEGES ON DATABASE automagistre TO automagistre;
                    GRANT ALL PRIVILEGES ON DATABASE automagistre TO hasura;
                ' > /docker-entrypoint-initdb.d/init-db-and-users.sql \
                && echo $$'
                    CREATE SCHEMA AUTHORIZATION automagistre;
                    ALTER ROLE automagistre SET search_path TO automagistre;
                ' > /restore.sql \
                && gunzip < $$(ls -t /backups/*automagistre.sql.gz | head -1) \
                    | sed 's/TO db/TO automagistre/' \
                    >> /restore.sql \
                && echo $$'
                    #!/bin/bash
                    set -e

                    cat /restore.sql | psql -v ON_ERROR_STOP=1 --user $$POSTGRES_USER --dbname automagistre
                ' > /docker-entrypoint-initdb.d/restore.sh \
                && docker-entrypoint.sh postgres
        volumes:
            -   type: tmpfs
                target: /var/lib/postgresql/data
                tmpfs:
                    size: 2G
            -   type: bind
                source: /opt/am/backups/postgres
                target: /backups
        environment:
            POSTGRES_USER: root
            POSTGRES_PASSWORD: root
        deploy:
            update_config:
                order: stop-first
        healthcheck:
            test: pg_isready
            interval: 5s
            timeout: 5s
            retries: 3
            start_period: 10s

networks:
    traefik:
        external: true
        name: traefik
    default:
        driver: overlay
        name: automagistre-next
        attachable: true
