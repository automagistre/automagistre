version: '3.7'

services:
    redis:
        image: redis:6.2.5-alpine
        volumes:
            -   type: bind
                source: /opt/am/redis/data
                target: /data
        deploy:
            mode: replicated
            replicas: 1
            endpoint_mode: dnsrr
            update_config:
                order: stop-first

    hasura:
        image: hasura/graphql-engine:v2.0.8
        command:
            - graphql-engine
            - serve
            - --enable-console
            - --server-port=80
            - --unauthorized-role=anonymous
            - --cors-domain=*
            - --admin-internal-errors=true
            - --admin-secret=${HASURA_ADMIN_SECRET}
        environment:
            HASURA_GRAPHQL_DATABASE_URL: postgres://db:${DB_PASSWORD}@postgres:5432/db
            HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://db:${DB_PASSWORD}@postgres:5432/hasura
            HASURA_GRAPHQL_JWT_SECRET: '{"jwk_url": "https://auth.automagistre.ru/auth/realms/automagistre/protocol/openid-connect/certs"}'
        networks:
            - default
            - traefik
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 10s
                order: start-first
            labels:
                - "traefik.enable=true"
                - "traefik.http.routers.automagistre-hasura.rule=Host(`api.automagistre.ru`)"
                - "traefik.http.routers.automagistre-hasura.entrypoints=websecure"
                - "traefik.http.routers.automagistre-hasura.tls=true"
                - "traefik.http.routers.automagistre-hasura.tls.certresolver=leresolver"
                - "traefik.http.services.automagistre-hasura-service.loadbalancer.server.port=80"

    postgres: &postgres
        image: postgres:13.4-alpine
        shm_size: 1gb
        volumes:
            -   type: bind
                source: /opt/am/postgres/data
                target: /var/lib/postgresql/data
        environment:
            POSTGRES_DB: db
            POSTGRES_USER: db
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        deploy:
            mode: global
            update_config:
                failure_action: rollback
                parallelism: 1
                delay: 5s
        healthcheck:
            test: pg_isready -U db
            interval: 5s
            timeout: 5s
            retries: 3
            start_period: 10s

    postgres_backup:
        <<: *postgres
        entrypoint: /bin/sh
        command:
            - -c
            - |
                apk add --no-cache tini gzip \
                && echo $$'
                postgres:5432:db:db:${DB_PASSWORD}
                ' > ~/.pgpass \
                && chmod 600 ~/.pgpass \
                && echo $$'#!/bin/bash
                pg_dump -h postgres -U db db | gzip > /backups/$$(date +"%Y%m%d_%H%M%S")_automagistre.sql.gz
                ' > /backup.sh \
                && chmod +x /backup.sh \
                && echo $$'
                10 3 * * * /backup.sh
                ' | crontab - \
                && exec tini -- crond -l 0 -f
        volumes:
            - /opt/am/backups/postgres:/backups
        deploy:
            mode: replicated
        healthcheck:
            disable: true

networks:
    traefik:
        external: true
        name: traefik
    default:
        driver: overlay
        name: automagistre
        attachable: true
    prometheus:
        external: true
        name: prometheus
