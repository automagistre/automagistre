version: '3.7'

services:
    containous:
        image: containous/whoami
        networks:
            - traefik
        deploy:
            labels:
                - "traefik.enable=true"
                - "traefik.http.routers.automagistre-crm-redirect.rule=Host(`msk.automagistre.ru`, `kazan.automagistre.ru`, `shavlev.automagistre.ru`, `whoami.automagistre.ru`)"
                - "traefik.http.routers.automagistre-crm-redirect.entrypoints=websecure"
                - "traefik.http.routers.automagistre-crm-redirect.tls=true"
                - "traefik.http.routers.automagistre-crm-redirect.tls.certresolver=leresolver"
                - "traefik.http.routers.automagistre-crm-redirect.middlewares=automagistre-crm-redirect-ymap,automagistre-crm-redirect"
                - "traefik.http.middlewares.automagistre-crm-redirect-ymap.redirectregex.regex=^https://(msk|kazan|shavlev).automagistre.ru/r/ymap"
                - "traefik.http.middlewares.automagistre-crm-redirect-ymap.redirectregex.replacement=https://r.automagistre.ru/$$1/ymap"
                - "traefik.http.middlewares.automagistre-crm-redirect-ymap.redirectregex.permanent=true"
                - "traefik.http.middlewares.automagistre-crm-redirect.redirectregex.regex=^https://(msk|kazan|shavlev).automagistre.ru/(.*)"
                - "traefik.http.middlewares.automagistre-crm-redirect.redirectregex.replacement=https://crm.automagistre.ru/$$1/$$2"
                - "traefik.http.middlewares.automagistre-crm-redirect.redirectregex.permanent=true"
                - "traefik.http.services.automagistre-crm-redirect-service.loadbalancer.server.port=80"

    nginx:
        image: automagistre/tenant-nginx:${VERSION}
        networks:
            - default
            - traefik
        deploy:
            mode: replicated
            replicas: 1
            endpoint_mode: dnsrr
            update_config:
                parallelism: 1
                delay: 10s
                order: start-first
            labels:
                - "traefik.enable=true"
                - "traefik.http.routers.automagistre-crm-callback.rule=Host(`crm.automagistre.ru`, `callback.automagistre.ru`, `r.automagistre.ru`)"
                - "traefik.http.routers.automagistre-crm-callback.entrypoints=websecure"
                - "traefik.http.routers.automagistre-crm-callback.tls=true"
                - "traefik.http.routers.automagistre-crm-callback.tls.certresolver=leresolver"
                - "traefik.http.services.automagistre-crm-callback-service.loadbalancer.server.port=80"

    php-fpm: &php-fpm
        image: automagistre/tenant-php:${VERSION}
        networks:
            - default
            - nsq
        environment: &env
            APP_SECRET: ${APP_SECRET}
            DATABASE_PASSWORD: ${DB_PASSWORD}
            SENTRY_DSN: ${SENTRY_DSN}
            SMSAERO_AUTH: ${SMSAERO_AUTH}
            TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
            GOOGLE_CREDENTIALS_FILE: ${GOOGLE_CREDENTIALS_FILE}
            KEYCLOAK_CLI_CLIENT_SECRET: ${KEYCLOAK_CLI_CLIENT_SECRET}
            KEYCLOAK_CRM_OAUTH_CLIENT_SECRET: ${KEYCLOAK_CRM_OAUTH_CLIENT_SECRET}
        stop_grace_period: 120s
        deploy:
            mode: replicated
            replicas: 1
            endpoint_mode: dnsrr
            update_config:
                parallelism: 1
                delay: 10s
                order: start-first

    cron_msk: &cron
        <<: *php-fpm
        command: console cron:start --blocking
        environment:
            <<: *env
            TENANT: msk
        healthcheck:
            disable: true
        deploy:
            mode: replicated
            replicas: 1

    cron_kazan:
        <<: *cron
        environment:
            <<: *env
            TENANT: kazan

    cron_shavlev:
        <<: *cron
        environment:
            <<: *env
            TENANT: shavlev

    cron_demo:
        <<: *cron
        environment:
            <<: *env
            TENANT: demo

    messenger:
        <<: *php-fpm
        command: console messenger:consume async -vv
        healthcheck:
            disable: true
        deploy:
            mode: replicated
            replicas: 1

    migration:
        <<: *php-fpm
        command: console tenant:doctrine:migrate
        healthcheck:
            disable: true
        deploy:
            mode: replicated
            replicas: 1
            restart_policy:
                condition: on-failure

    memcached:
        image: memcached:1.6.9-alpine
        healthcheck:
            test: nc -z 127.0.0.1 11211
            interval: 5s
            timeout: 5s
            retries: 3
            start_period: 5s

    redis:
        image: redis:6.2.5-alpine
        volumes:
            -   type: bind
                source: /opt/am/redis/data
                target: /data
        deploy:
            mode: replicated
            replicas: 1
            endpoint_mode: dnsrr
            update_config:
                order: stop-first

    hasura:
        image: hasura/graphql-engine:v2.0.7
        command:
            - graphql-engine
            - serve
            - --enable-console
            - --server-port=80
            - --unauthorized-role=anonymous
            - --cors-domain=*
            - --admin-internal-errors=true
            - --admin-secret=${HASURA_ADMIN_SECRET}
        environment:
            HASURA_GRAPHQL_DATABASE_URL: postgres://db:${DB_PASSWORD}@postgres_msk:5432/db
            HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://db:${DB_PASSWORD}@postgres_msk:5432/hasura
            HASURA_GRAPHQL_JWT_SECRET: '{"jwk_url": "https://auth.automagistre.ru/auth/realms/automagistre/protocol/openid-connect/certs"}'
        networks:
            - default
            - traefik
        deploy:
            mode: replicated
            replicas: 1
            update_config:
                parallelism: 1
                delay: 10s
                order: start-first
            labels:
                - "traefik.enable=true"
                - "traefik.http.routers.automagistre-hasura.rule=Host(`api.automagistre.ru`)"
                - "traefik.http.routers.automagistre-hasura.entrypoints=websecure"
                - "traefik.http.routers.automagistre-hasura.tls=true"
                - "traefik.http.routers.automagistre-hasura.tls.certresolver=leresolver"
                - "traefik.http.services.automagistre-hasura-service.loadbalancer.server.port=80"

    postgres:
        image: postgres:13.4-alpine
        volumes:
            -   type: bind
                source: /opt/am/postgres/data
                target: /var/lib/postgresql/data
            -   type: bind
                source: /opt/am/db/backups
                target: /backups
        environment:
            POSTGRES_DB: db
            POSTGRES_USER: db
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        deploy:
            mode: global
            update_config:
                failure_action: rollback
                parallelism: 1
                delay: 5s
        healthcheck:
            test: pg_isready
            interval: 5s
            timeout: 5s
            retries: 3
            start_period: 10s

    postgres_msk: &postgres
        image: postgres:12.2
        volumes:
            -   type: bind
                source: /opt/am/db/tenant/msk
                target: /var/lib/postgresql/data
            -   type: bind
                source: /opt/am/db/backups
                target: /backups
        environment:
            POSTGRES_DB: db
            POSTGRES_USER: db
            POSTGRES_PASSWORD: ${DB_PASSWORD}
        deploy:
            mode: global
            update_config:
                failure_action: rollback
                parallelism: 1
                delay: 5s
        healthcheck:
            test: pg_isready
            interval: 5s
            timeout: 5s
            retries: 3
            start_period: 10s

    postgres_kazan:
        <<: *postgres
        volumes:
            -   type: bind
                source: /opt/am/db/tenant/kazan
                target: /var/lib/postgresql/data
            -   type: bind
                source: /opt/am/db/backups
                target: /backups

    postgres_shavlev:
        <<: *postgres
        volumes:
            -   type: bind
                source: /opt/am/db/tenant/shavlev
                target: /var/lib/postgresql/data
            -   type: bind
                source: /opt/am/db/backups
                target: /backups

    postgres_demo:
        <<: *postgres
        volumes:
            -   type: bind
                source: /opt/am/db/tenant/demo
                target: /var/lib/postgresql/data
            -   type: bind
                source: /opt/am/db/backups
                target: /backups

networks:
    traefik:
        external: true
        name: traefik
    default:
        driver: overlay
        name: automagistre
        attachable: true
    nsq:
        external: true
        name: nsq
