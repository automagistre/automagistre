version: '3.7'

services:
    server:
        image: drone/drone:1.6.2
        environment:
            DRONE_LOGS_DEBUG: 'false'
            DRONE_LOGS_PRETTY: 'false'
            DRONE_LOGS_TRACE: 'false'
            DRONE_USER_CREATE: username:grachevko,machine:false,admin:true
            DRONE_SERVER_HOST: drone.automagistre.ru
            DRONE_SERVER_PROTO: https
            DRONE_GITHUB_CLIENT_ID: ${DRONE_GITHUB_CLIENT}
            DRONE_GITHUB_CLIENT_SECRET: ${DRONE_GITHUB_SECRET}
            DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
            DRONE_DATABASE_SECRET: ${DRONE_SECRET}
            DRONE_DATABASE_DRIVER: postgres
            DRONE_DATABASE_DATASOURCE: postgres://db:${POSTGRES_PASSWORD}@postgres:5432/db?sslmode=disable
        networks:
            - drone
            - ingress
        deploy:
            mode: replicated
            replicas: 1
            endpoint_mode: dnsrr
            labels:
                - "traefik.docker.network=proxy"
                - "traefik.enable=true"
                - "traefik.frontend.rule=Host:drone.automagistre.ru"
                - "traefik.port=80"
                - "traefik.protocol=http"
                - "traefik.backend.loadbalancer.method=drr"

    postgres:
        image: postgres:12.0
        volumes:
            - /home/drone/postgres:/var/lib/postgresql/data
        environment:
            POSTGRES_DB: db
            POSTGRES_USER: db
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        networks:
            - drone

    agent:
        image: drone/drone-runner-docker:1.0.1
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        environment:
            DRONE_RPC_HOST: "server"
            DRONE_RPC_PROTO: http
            DRONE_RPC_SECRET: ${DRONE_RPC_SECRET}
            DRONE_RUNNER_NAME: ${HOSTNAME}
            DRONE_RUNNER_MAX_PROCS: 2
        networks:
            - drone

networks:
    ingress:
        external: true
        name: proxy
    drone:
        driver: overlay
        name: drone
