clone:
    git:
        image: plugins/git
        depth: 1

_docker: &docker
    image: docker
    volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    secrets: [ HUB_LOGIN, HUB_PASSWORD ]

pipeline:
    build app:
        <<: *docker
        group: build
        commands:
            - >-
                docker build -t "automagistre/automagistre:${DRONE_BUILD_NUMBER}"
                --label build=${DRONE_BUILD_NUMBER}
                --label artifacts
                --build-arg APP_VERSION="$DRONE_BUILD_NUMBER"
                --build-arg APP_BUILD_TIME="`date --rfc-2822`"
                --build-arg APP_CACHE="test"
                .

    validate php-cs-fixer:
        group: validate
        image: automagistre/automagistre:${DRONE_BUILD_NUMBER}
        commands:
            - >-
                php-cs-fixer fix
                --config=./.php_cs.dist
                --verbose
                --dry-run
                --using-cache=no
        when:
            branch:
                exclude: master

    validate blank end line:
        group: validate
        image: automagistre/automagistre:${DRONE_BUILD_NUMBER}
        commands:
            - >-
                find .
                -not -path "./public/*"
                -not -path "./.idea/*"
                -type f -exec grep -Iq . {} \; -and -print0
                | xargs -0 -L1 bash -c 'test -z "$(tail -c 1 "$0")"
                || (echo "No new line at end of $0" && exit 1)'
                || exit 1
        when:
            branch:
                exclude: master

    validate symfony requirements:
        group: validate
        image: automagistre/automagistre:${DRONE_BUILD_NUMBER}
        commands:
            - /docker-entrypoint.sh requirements-checker
        environment:
            APP_ENV: 'test'
            APP_DEBUG: '0'
            MIGRATIONS: 'false'
        when:
            branch:
                exclude: [ master ]

    validate symfony security:
        group: validate
        image: automagistre/automagistre:${DRONE_BUILD_NUMBER}
        commands:
            - /docker-entrypoint.sh security-checker security:check $APP_DIR/composer.lock
        environment:
            APP_ENV: 'test'
            APP_DEBUG: '0'
            MIGRATIONS: 'false'
        when:
            branch:
                exclude: [ master ]

    validate phpstan:
        group: validate
        image: automagistre/automagistre:${DRONE_BUILD_NUMBER}
        commands:
            - cd "$APP_DIR"
            - /docker-entrypoint.sh php -d memory_limit=-1 vendor/bin/phpstan analyse --configuration phpstan.neon --no-progress
        environment:
            APP_ENV: 'test'
            APP_DEBUG: '1'
            MIGRATIONS: 'false'

    validate doctrine: &validate-doctrine
        group: validate
        image: automagistre/automagistre:${DRONE_BUILD_NUMBER}
        commands:
            - /docker-entrypoint.sh console doctrine:schema:create
        environment:
            APP_ENV: 'test'
            APP_DEBUG: '0'
            MIGRATIONS: 'false'
            WAIT_HOSTS: 'mysql:3306'

    test phpunit: &test-phpunit
        group: test
        image: automagistre/automagistre:${DRONE_BUILD_NUMBER}
        commands:
            - cd "$APP_DIR"
            - /docker-entrypoint.sh
            - paratest --processes=$(grep -c ^processor /proc/cpuinfo || 4)
        environment:
            APP_ENV: 'test'
            APP_DEBUG: '0'
            FIXTURES: 'false'
            MIGRATIONS: 'false'

    clean:
        <<: *docker
        group: deploy
        commands:
            - docker rmi --force `docker images --filter before=automagistre/automagistre:${DRONE_BUILD_NUMBER} --format "{{ .Repository }}:{{ .Tag }}" automagistre/automagistre`
        when:
            branch: master
            status: [ success, failure ]

    build app prod:
        <<: *docker
        group: deploy
        commands:
            - >-
                docker build -t "automagistre/automagistre:${DRONE_BUILD_NUMBER}"
                --label build=${DRONE_BUILD_NUMBER}
                --label artifacts
                --build-arg APP_VERSION="$DRONE_BUILD_NUMBER"
                --build-arg APP_BUILD_TIME="`date --rfc-2822`"
                --build-arg APP_CACHE="prod"
                .
        when:
            event: push
            branch: master
            status: success

    deploy: &deploy_service
        <<: *docker
        commands:
            - docker service update --detach=false --image "automagistre/automagistre:${DRONE_BUILD_NUMBER}" automagistre
        when:
            event: push
            branch: master
            status: success

services:
    mysql:
        image: mariadb:10.1.23
        environment:
            MYSQL_DATABASE: 'db'
            MYSQL_USER: 'db'
            MYSQL_PASSWORD: 'db'
            MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
