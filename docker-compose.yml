version: '3.7'

services:
    traefik:
        image: traefik:v2.6.0
        labels:
            ru.grachevko.dhu: 'traefik.automagistre.local:0:traefik'
            traefik.enable: true
            traefik.http.routers.traefik.rule: Host(`traefik.automagistre.local`)
            traefik.http.routers.traefik.entrypoints: web
            traefik.http.routers.traefik.service: api@internal
        container_name: traefik
        command:
            - --api.dashboard=true
            - --api.insecure=true
            - --entrypoints.web.address=:80
            - --entrypoints.websecure.address=:443
            - --providers.docker=true
            - --providers.docker.network=traefik
            - --providers.docker.exposedByDefault=false
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock

    crm:
        image: harbor.grachevko.ru/automagistre/crm:base
        labels:
            ru.grachevko.dhu: 'crm-next.automagistre.local:0:traefik'
            traefik.enable: true
            traefik.http.routers.crm-next.rule: Host(`crm-next.automagistre.local`) && !Path(`/v1/graphql`)
            traefik.http.routers.crm-next.entrypoints: web
            traefik.http.services.crm-next.loadbalancer.server.port: 80
        extra_hosts:
            - crm-next.automagistre.local:0.0.0.0
        command: npm run start
        environment:
            HOST: crm-next.automagistre.local
            PORT: 80
        working_dir: /app
        volumes:
            - ./crm:/app
        user: ${UID:-1000}:${GID:-1000}

    nginx:
        image: harbor.grachevko.ru/automagistre/automagistre-nginx:base
        labels:
            ru.grachevko.dhu: '{callback,r,crm}.automagistre.local:0:traefik'
            traefik.enable: true
            traefik.http.routers.nginx.rule: Host(`callback.automagistre.local`, `r.automagistre.local`, `crm.automagistre.local`)
            traefik.http.routers.nginx.entrypoints: web
            traefik.http.services.nginx.loadbalancer.server.port: 80
        volumes:
            - ./public:/usr/local/app/public
            - ./etc/nginx.conf:/etc/nginx/nginx.conf
            - ./etc/nginx.default.conf:/etc/nginx/templates/default.conf.template
            - ./etc/nginx.cors.conf:/etc/nginx/cors.conf
            - ./etc/nginx.cors-setup.conf:/etc/nginx/cors.setup.conf

    php-fpm:
        image: harbor.grachevko.ru/automagistre/automagistre:base
        volumes:
            - ./:/usr/local/app
            - ./etc/php.ini:/usr/local/etc/php/php.ini
            - ./etc/php-fpm.conf:/usr/local/etc/php-fpm.conf
            - ./etc/php-fpm.www.conf:/usr/local/etc/php-fpm.d/www.conf
        environment:
            PHP_OPCACHE_ENABLE: 0
            APP_ENV: dev
            APP_DEBUG: 1
        user: ${UID:-1000}:${GID:-1000}

    postgres:
        image: harbor.grachevko.ru/automagistre/automagistre-postgres:dev
        build:
            target: postgres
        labels:
            ru.grachevko.dhu: 'postgres.automagistre.local'
        volumes:
            -   type: tmpfs
                target: /var/lib/postgresql/data
                tmpfs:
                    size: 2G
            - ./:/usr/local/app
        environment:
            POSTGRES_DB: db
            POSTGRES_USER: db
            POSTGRES_PASSWORD: db

    redis:
        image: redis:6.2.5-alpine
        labels:
            ru.grachevko.dhu: 'redis.automagistre.local'
        volumes:
            -   type: tmpfs
                target: /data
                tmpfs:
                    size: 64mb

    host.docker.internal:
        image: alpine/socat:1.7.3.4-r0
        entrypoint: sh
        command: -c "socat tcp-listen:9000,fork,reuseaddr tcp-connect:$$(/sbin/ip route|awk '/default/ { print $$3 }'):9000"

    nsqd:
        image: nsqio/nsq:v1.2.0
        command: /nsqd

    nsq_tail:
        image: nsqio/nsq:v1.2.0
        command:
            - /nsq_tail
            - -topic=symfony-messenger
            - -channel=tail
            - -nsqd-tcp-address=nsqd:4150

    nsqadmin:
        image: nsqio/nsq:v1.2.0
        labels:
            ru.grachevko.dhu: 'nsq.automagistre.local'
        command: /nsqadmin --nsqd-http-address=nsqd:4151 --http-address=0.0.0.0:80

    hasura:
        image: hasura/graphql-engine:v2.2.0.cli-migrations-v3
        labels:
            ru.grachevko.dhu: 'hasura.automagistre.local:0:traefik'
            traefik.enable: true
            traefik.http.routers.hasura.rule: Host(`hasura.automagistre.local`) || (Host(`hasura.automagistre.local`) && Path(`/v1/graphql`))
            traefik.http.routers.hasura.entrypoints: web
            traefik.http.services.hasura.loadbalancer.server.port: 80
        command: graphql-engine serve
        environment:
            HASURA_GRAPHQL_ADMIN_INTERNAL_ERRORS: 'true'
            HASURA_GRAPHQL_ADMIN_SECRET: admin
            HASURA_GRAPHQL_CORS_DOMAIN: '*'
            HASURA_GRAPHQL_DATABASE_URL: postgres://db:db@postgres:5432/db
            HASURA_GRAPHQL_DEV_MODE: 'true'
            HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
            HASURA_GRAPHQL_JWT_SECRET: '{"jwk_url": "https://sso.automagistre.ru/auth/realms/automagistre/protocol/openid-connect/certs"}'
            HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://db:db@postgres:5432/db
            HASURA_GRAPHQL_SERVER_PORT: 80
            HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: 'false'
            HASURA_GRAPHQL_UNAUTHORIZED_ROLE: 'anonymous'
        user: ${UID:-1000}:${GID:-1000}
        networks:
            default:
                aliases:
                    - hasura.automagistre.local

    hasura-console:
        image: hasura/graphql-engine:v2.2.0.cli-migrations-v3
        labels:
            ru.grachevko.dhu: 'hasura-console.automagistre.local'
        extra_hosts:
            - hasura-console.automagistre.local:0.0.0.0
        entrypoint:
            - hasura-cli
        command:
            - console
            - --address=hasura-console.automagistre.local
            - --console-port=80
            - --no-browser
        environment:
            HASURA_GRAPHQL_ADMIN_SECRET: admin
        working_dir: /app
        volumes:
            - ./:/app
            - ./var/hasura:/.hasura
        user: ${UID:-1000}:${GID:-1000}

    hasura-test:
        image: hasura/graphql-engine:v2.2.0.cli-migrations-v3
        labels:
            ru.grachevko.dhu: 'hasura-test.automagistre.local:0:traefik'
            traefik.enable: true
            traefik.http.routers.hasura.rule: Host(`hasura-test.automagistre.local`) || (Host(`hasura-test.automagistre.local`) && Path(`/v1/graphql`))
            traefik.http.routers.hasura.entrypoints: web
            traefik.http.services.hasura.loadbalancer.server.port: 80
        extra_hosts:
            - hasura.automagistre.local:127.0.0.1
        command: graphql-engine serve
        environment:
            HASURA_GRAPHQL_ADMIN_INTERNAL_ERRORS: 'true'
            HASURA_GRAPHQL_ADMIN_SECRET: admin
            HASURA_GRAPHQL_CORS_DOMAIN: '*'
            HASURA_GRAPHQL_DATABASE_URL: postgres://db:db@postgres:5432/db_test
            HASURA_GRAPHQL_DEV_MODE: 'true'
            HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
            HASURA_GRAPHQL_JWT_SECRET: '{"jwk_url": "https://sso.automagistre.ru/auth/realms/automagistre/protocol/openid-connect/certs"}'
            HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://db:db@postgres:5432/db_test
            HASURA_GRAPHQL_SERVER_PORT: 80
            HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: 'false'
            HASURA_GRAPHQL_UNAUTHORIZED_ROLE: 'anonymous'
        working_dir: /app
        volumes:
            - ./:/app:ro

networks:
    default:
        name: automagistre
        ipam:
            config:
                -   subnet: 192.168.66.0/24
