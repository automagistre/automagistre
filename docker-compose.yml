services:
    # crm:
    #     build:
    #         context: crm/
    #         target: node-base
    #     labels:
    #         ru.grachevko.dhu: 'crm-next.automagistre.local:0:traefik'
    #         traefik.enable: true
    #         traefik.http.routers.crm-next.rule: Host(`crm-next.automagistre.local`) && !Path(`/v1/graphql`)
    #         traefik.http.routers.crm-next.entrypoints: http
    #         traefik.http.services.crm-next.loadbalancer.server.port: 80
    #     extra_hosts:
    #         - crm-next.automagistre.local:0.0.0.0
    #     command: npm run start
    #     environment:
    #         HOST: crm-next.automagistre.local
    #         PORT: 80
    #     working_dir: /app
    #     volumes:
    #         - ./crm:/app
    #     user: ${UID:-1000}:${GID:-1000}
    #     networks:
    #         - default
    #         - web

    nginx:
        build:
            target: nginx-base
            context: .
        labels:
            traefik.enable: true
            traefik.http.routers.nginx.rule: Host(`crm.automagistre.local`)
            traefik.http.routers.nginx.entrypoints: web 
            traefik.http.services.nginx.loadbalancer.server.port: 80
        environment:
            PHP_FPM_HOST: php-fpm
        volumes:
            - ./public:/usr/local/app/public
            - ./etc/nginx.conf:/etc/nginx/nginx.conf
            - ./etc/nginx.default.conf:/etc/nginx/templates/default.conf.template
            - ./etc/nginx.cors.conf:/etc/nginx/cors.conf
            - ./etc/nginx.cors-setup.conf:/etc/nginx/cors.setup.conf
        networks:
            - default
            - web

    php-fpm:
        build:
            target: php-base
            context: .
        volumes:
            - ./:/usr/local/app
            - ./etc/php.ini:/usr/local/etc/php/php.ini
            - ./etc/php-fpm.conf:/usr/local/etc/php-fpm.conf
            - ./etc/php-fpm.www.conf:/usr/local/etc/php-fpm.d/www.conf
        environment:
            PHP_OPCACHE_ENABLE: 0
            APP_ENV: dev
            APP_DEBUG: 1
        user: ${UID:-1000}:${GID:-1000}

    postgres:
        image: postgres:14.2-alpine
        volumes:
            -   type: tmpfs
                target: /var/lib/postgresql/data
                tmpfs:
                    size: 2G
            - ./:/usr/local/app
        environment:
            POSTGRES_DB: db
            POSTGRES_USER: db
            POSTGRES_PASSWORD: db
        ports:
          - 5432:5432

    redis:
        image: redis:6.2.5-alpine
        volumes:
            -   type: tmpfs
                target: /data
                tmpfs:
                    size: 64mb

    host.docker.internal:
        image: alpine/socat:1.7.3.4-r0
        entrypoint: sh
        command: -c "socat tcp-listen:9000,fork,reuseaddr tcp-connect:$$(/sbin/ip route|awk '/default/ { print $$3 }'):9000"

    # nsqd:
    #     image: nsqio/nsq:v1.2.0
    #     command: /nsqd

    # nsq_tail:
    #     image: nsqio/nsq:v1.2.0
    #     command:
    #         - /nsq_tail
    #         - -topic=symfony-messenger
    #         - -channel=tail
    #         - -nsqd-tcp-address=nsqd:4150

    # nsqadmin:
    #     image: nsqio/nsq:v1.2.0
    #     labels:
    #         ru.grachevko.dhu: 'nsq.automagistre.local'
    #     command: /nsqadmin --nsqd-http-address=nsqd:4151 --http-address=0.0.0.0:80

    # hasura:
    #     image: hasura/graphql-engine
    #     labels:
    #         traefik.enable: true
    #         traefik.http.routers.hasura.rule: Host(`hasura.automagistre.local`) || (Host(`hasura.automagistre.local`) && Path(`/v1/graphql`))
    #         traefik.http.routers.hasura.entrypoints: http
    #         traefik.http.services.hasura.loadbalancer.server.port: 8080
    #     command: graphql-engine serve
    #     ports:
    #         - 8080:8080
    #     environment:
    #         HASURA_GRAPHQL_ADMIN_INTERNAL_ERRORS: 'true'
    #         HASURA_GRAPHQL_ADMIN_SECRET: admin
    #         HASURA_GRAPHQL_CORS_DOMAIN: '*'
    #         HASURA_GRAPHQL_DATABASE_URL: postgres://db:db@postgres:5432/db
    #         HASURA_GRAPHQL_DEV_MODE: 'true'
    #         HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
    #         # HASURA_GRAPHQL_JWT_SECRET: '{"jwk_url": "https://sso.automagistre.ru/auth/realms/automagistre/protocol/openid-connect/certs"}'
    #         HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://db:db@postgres:5432/db
    #         HASURA_GRAPHQL_SERVER_PORT: 8080
    #         HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: 'false'
    #         HASURA_GRAPHQL_UNAUTHORIZED_ROLE: 'anonymous'
    #         ## enable the console served by server
    #         HASURA_GRAPHQL_ENABLE_CONSOLE: "true" # set to "false" to disable console
    #         # HASURA_GRAPHQL_METADATA_DEFAULTS: '{"backend_configs":{"dataconnector":{"athena":{"uri":"http://data-connector-agent:8081/api/v1/athena"},"mariadb":{"uri":"http://data-connector-agent:8081/api/v1/mariadb"},"mysql8":{"uri":"http://data-connector-agent:8081/api/v1/mysql"},"oracle":{"uri":"http://data-connector-agent:8081/api/v1/oracle"},"snowflake":{"uri":"http://data-connector-agent:8081/api/v1/snowflake"}}}}'
    #     user: ${UID:-1000}:${GID:-1000}
    #     # depends_on:
    #     #     data-connector-agent:
    #     #         condition: service_healthy
    #     networks:
    #         default:
    #             aliases:
    #                 - hasura.automagistre.local
        
    # data-connector-agent:
    #     image: hasura/graphql-data-connector:v2.38.0
    #     restart: always
    #     ports:
    #         - 8081:8081
    #     environment:
    #         QUARKUS_LOG_LEVEL: ERROR # FATAL, ERROR, WARN, INFO, DEBUG, TRACE
    #   ## https://quarkus.io/guides/opentelemetry#configuration-reference
    #         QUARKUS_OPENTELEMETRY_ENABLED: "false"
    #   ## QUARKUS_OPENTELEMETRY_TRACER_EXPORTER_OTLP_ENDPOINT: http://jaeger:4317
    #     healthcheck:
    #         test: ["CMD", "curl", "-f", "http://localhost:8081/api/v1/athena/health"]
    #         interval: 5s
    #         timeout: 10s
    #         retries: 5
    #         start_period: 5s

    # hasura-console:
    #     image: hasura/graphql-engine:v2.2.0.cli-migrations-v3
    #     labels:
    #         ru.grachevko.dhu: 'hasura-console.automagistre.local'
    #     extra_hosts:
    #         - hasura-console.automagistre.local:0.0.0.0
    #     entrypoint:
    #         - hasura-cli
    #     command:
    #         - console
    #         - --address=hasura-console.automagistre.local
    #         - --console-port=80
    #         - --no-browser
    #     environment:
    #         HASURA_GRAPHQL_ADMIN_SECRET: admin
    #     working_dir: /app
    #     volumes:
    #         - ./:/app
    #         - ./var/hasura:/.hasura
    #     user: ${UID:-1000}:${GID:-1000}

    # hasura-test:
    #     image: hasura/graphql-engine:v2.2.0.cli-migrations-v3
    #     labels:
    #         ru.grachevko.dhu: 'hasura-test.automagistre.local:0:traefik'
    #         traefik.enable: true
    #         traefik.http.routers.hasura.rule: Host(`hasura-test.automagistre.local`) || (Host(`hasura-test.automagistre.local`) && Path(`/v1/graphql`))
    #         traefik.http.routers.hasura.entrypoints: web
    #         traefik.http.services.hasura.loadbalancer.server.port: 80
    #     extra_hosts:
    #         - hasura.automagistre.local:127.0.0.1
    #     command: graphql-engine serve
    #     environment:
    #         HASURA_GRAPHQL_ADMIN_INTERNAL_ERRORS: 'true'
    #         HASURA_GRAPHQL_ADMIN_SECRET: admin
    #         HASURA_GRAPHQL_CORS_DOMAIN: '*'
    #         HASURA_GRAPHQL_DATABASE_URL: postgres://db:db@postgres:5432/db_test
    #         HASURA_GRAPHQL_DEV_MODE: 'true'
    #         HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
    #         HASURA_GRAPHQL_JWT_SECRET: '{"jwk_url": "https://sso.automagistre.ru/auth/realms/automagistre/protocol/openid-connect/certs"}'
    #         HASURA_GRAPHQL_METADATA_DATABASE_URL: postgres://db:db@postgres:5432/db_test
    #         HASURA_GRAPHQL_SERVER_PORT: 80
    #         HASURA_GRAPHQL_STRINGIFY_NUMERIC_TYPES: 'false'
    #         HASURA_GRAPHQL_UNAUTHORIZED_ROLE: 'anonymous'
    #     working_dir: /app
    #     volumes:
    #         - ./:/app:ro

networks:
    default:
        name: automagistre
        attachable: true
    web:
        name: traefik
        external: true
                  
